# Add ApiResponse<T> 

openapi: 3.0.4
info:
  title: News feed C# 
  version: 1.0.0
tags:
  - name: Auth Controller
  - name: Users Controller
  - name: News Controller
  - name: File Controller
paths:
  /v1/auth/login:
    post:
      tags:
        - Auth Controller
      summary: Login
      operationId: getLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse<LoginUserDto>'
        'default':
          description: Any error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/auth/register:
    post:
      tags:
        - Auth Controller
      summary: Register
      operationId: getRegister
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse<LoginUserDto>'
        'default':
          description: Any error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /v1/users:
    put:
      tags:
        - Users Controller
      summary: Replace user data
      security:
        - bearerAuth: []
      operationId: replaceuser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse<PutUserDto>'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        'default':
          description: Any error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Users Controller
      summary: Delete user by token
      operationId: deleteUserByToken
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        'default':
          description: Any error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/{id}:
    get:
      tags:
        - Users Controller
      summary: Get user info by Id
      operationId: getUserInfoById
      parameters:
        - name: id
          in: path
          explode: true
          required: true
          schema:
            type: string
            format: guid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse<PublicUserView>'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        'default':
          description: Any Errors
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ErrorResponse'
  /v1/users/info:
    get: 
      tags:
        - Users Controller
      summary: Get user info by token
      operationId: getuserInfoByToken
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse<PublicUserView>'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        'default':
          description: Any error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/news:
    get:
      tags:
        - News Controller
      summary: Get paginated news
      operationId: getPaginatedNews
      parameters:
        - name: limit
          in: query
          description: News per page
          required: true
          explode: true
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: page
          required: true
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse<PageableNewsDto>'
        'default':
          description: Any Errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - News Controller
      summary: Create news
      operationId: createNews
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewsRequest'
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse<NewsOutDto>'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        'default':
          description: Any Errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/news/{id}:
    put:
      tags:
        - News Controller
      summary: Edit news
      operationId: editNews
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: news id for edit
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutNewsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        'default':
          description: Any Errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - News Controller
      summary: Delete news By Id
      operationId: deleteNewsById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        'default':
          description: Any Errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/news/find:
    get:
      tags:
        - News Controller
      summary: Find news
      operationId: findNews
      parameters:
        - name: author
          description: Author name
          in: query
          schema:
            type: string
        - name: keywords
          description: Keywords in title or description
          in: query
          schema:
            type: string
        - name: tags
          in: query
          description: Any tag in news
          schema: 
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: News per page
          required: true
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Page
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Ok
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse<PageableNewsDto>'
        'default':
          description: Any Errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/news/user/{userId}:
    get:
      tags:
        - News Controller
      summary: Get user news
      operationId: getuserNews
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: guid
        - name: limit
          in: query
          description: News per page
          required: true
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: page
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse<PageableNewsDto>'
        'default':
          description: Any Errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/file/uploadFile:
    post:
      tags:
        - File Controller
      summary: Upload image file
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse<string>'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        'default':
          description: Any Errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/file/{fileName}:
    get:
      tags:
        - File Controller
      summary: Get image by name
      parameters:
        - name: fileName
          in: path
          description: Path to file
          required: true
          schema:
            type: string
            format: path
      responses:
        '200': 
          description: Ok
          content:
            image/png:
              schema:
                type: string
                format: binary
        'default':
          description: Any Errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
#MODELS
components:
  schemas:
  # Auth
    SignInRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          minLength: 3
          maxLength: 100
        password:
          type: string
    SignUpRequest:
      required:
          - email
          - password
          - name
          - avatar
      type: object
      properties:
        email:
          type: string
          minLength: 3
          maxLength: 100
        name:
          type: string
          minLength: 3
          maxLength: 25
        password:
          type: string
        avatar:
          type: string
    LoginUserDto:
      type: object
      properties:
        id:
          type: string
          format: guid
        avatar:
          type: string
        email:
          type: string
        name:
          type: string
        token:
          type: string
          format: JWT
    ApiResponse<LoginUserDto>:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/LoginUserDto'
        message:
          type: string
  # News
    CreateNewsRequest:
      required:
        - description
        - image
        - tags
        - title
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 160 
        description:
          type: string
          minLength: 3
          maxLength: 160
        tags:
          type: array
          items: 
            type: string
        image:
          type: string
          minLength: 3
          maxLength: 160
    PutNewsRequest:
      required:
        - description
        - image
        - tags
        - title
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 160 
        description:
          type: string
          minLength: 3
          maxLength: 160
        tags:
          type: array
          items: 
            type: string
        image:
          type: string
          minLength: 3
          maxLength: 160
    ApiResponse<NewsOutDto>:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/NewsOutDto'
        message:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
    NewsOutDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        image:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag' 
        userId:
          type: string
          format: guid
        userName:
          type: string
    PageableNewsDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/NewsOutDto'
        numberOfElements:
          type: integer
          format: int64
    ApiResponse<PageableNewsDto>:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PageableNewsDto'
        message:
          type: string
  # User
    PublicUserView:
      type: object
      properties:
        id:
          type: string
          format: guid
        avatar:
          type: string
        email:
          type: string
        name:
          type: string
    ApiResponse<PublicUserView>:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PublicUserView'
        message:
          type: string
    PutUserRequest:
      required:
        - avatar
        - email
        - name
      type: object
      properties:
        avatar:
          type: string
          minLength: 3
          maxLength: 160
        email:
          type: string
          minLength: 3
          maxLength: 100
        name:
          type: string
          minLength: 3
          maxLength: 25
    PutUserDto:
      type: object
      properties:
        id:
          type: string
          format: guid
        avatar:
          type: string
        name:
          type: string
        email:
          type: string
    ApiResponse<PutUserDto>:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PutUserDto'
        message:
          type: string
  # File
    ApiResponse<string>:
      type: object
      properties:
        data:
          type: string
          format: path
        message:
          type: string
  # Common
    ApiResponse:
      type: object
      properties:
        message:
          type: string
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  securitySchemes:
    bearerAuth:                     
      type: http
      scheme: bearer
      bearerFormat: JWT
